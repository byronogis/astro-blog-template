---
import { getCollection } from 'astro:content'
import PostHead from '~/components/PostHead.astro'
import DefaultLayout from '~/layouts/Default.astro'
import PostTOC from '~/components/PostTOC.astro'
import PostTag from '~/components/PostTag.astro'
import { getDate } from '~/utils/time'
import { getPath } from '~/utils/path'

let data
let render
let headings
let Content
let slug

if (Astro.props.frontmatter) { // used in md
  ;({ frontmatter: data, headings } = Astro.props)
}
else {
  ;({ data, render, slug } = Astro.props)

  ;({ Content, headings } = await render())
}

const postEntries = (await getCollection('blog'))
  .filter(entry => entry.data.series && (entry.data.series === data.series))
  .sort((a, b) => {
    const aTime = new Date(a.data.modifiedTime ?? a.data.publishedTime).getTime()
    const bTime = new Date(b.data.modifiedTime ?? b.data.publishedTime).getTime()
    return bTime - aTime
  })
---

<DefaultLayout>
  <PostHead slot="head" {...data} />

  <div
    class:list={[
      'relative',
      'flex flex-row',
      'layout_post',
    ]}
    data-pagefind-body
  >
    <article class:list={[
      'markdown', // unocss typography
      'mx-auto !max-w-[clamp(70%,90%,65ch)] w-[clamp(70%,90%,65ch)]',
      'md:(px-8)',
    ]}>
      <section class="not-markdown text-center">
        <h1 class="site-title">{data.title}</h1>

        <div class="my-4 site-opacity text-4 grid grid-cols-[1fr_1fr] justify-center [&>span:nth-child(odd)]:(pr-2 text-right) [&>span:nth-child(even)]:(pr-2 text-left)">
          <span>Author:</span>
          <span>{data.author}</span>

          <span>Last updated:</span>
          <span>{getDate(data.modifiedTime || data.publishedTime)}</span>
        </div>

        <p class="font-italic site-opacity">{data.description}</p>

        <ul class="flex flex-row flex-wrap justify-center items-center text-3 [&_li::after]:(content-[''])">
          {data.tags.map(tag => (
            <PostTag tag={tag} border={false} />
            <li class="w-0.4em h-0.4em mx-1 rounded-50% bg-text:20 last:hidden"></li>
          ))}
        </ul>

        {data.series && <details>
          <summary class="cursor-pointer py-4">{data.series} ({postEntries.length})</summary>

          <ul class="flex flex-col">
            {postEntries.map(entry => (
              <a
                class:list={[
                  'my-2',
                  { 'font-bold': slug === entry.slug, 'font-normal': slug !== entry.slug },
                ]}
                href={getPath('post', entry.slug)}
                title={entry.data.title}
              >{entry.data.title}{entry.slug}{}</a>
            ))}
          </ul>
        </details>}

        <hr class="my-4">
      </section>

      <slot>
        {Content ? <Content /> : null}
      </slot>
    </article>

    <aside class:list={[
      'flex-1',
      'overflow-auto overscroll-contain p-4 bg-primary',
      'lt-sm:(w-[min(90%,calc(1440px*0.65))])',
      'sm:(!left-[calc(80px)])',
      'lt-md:(fixed z-10 left-0 right-0 top-8 h-60lvh w-[calc(calc(100%-80px)*0.9)] m-auto leading-8 translate-x--100vw transition-all site-shadow-60 rounded-lg)',
      'md:(sticky top-0 h-100dvh max-h-100dvh  text-text:70)',
      'layout_post__toc',
    ]}>
      <PostTOC
        range={[2, 4]}
        number={true}
        line={true}
        key="post-aside"
        headings={headings.map(heading => ({ ...heading, title: heading.text, url: `#${heading.slug}` }))}
      />
    </aside>

  </div>
</DefaultLayout>

<script>
  const toc = document.querySelector('.layout_post__toc')
  toc?.addEventListener('click', (event) => {
    if (window.innerWidth < 1024 || event.target?.tagName === 'A') {
      toc.classList.remove('!translate-none')
    }

    if (
      event.target
      && event.target instanceof HTMLAnchorElement
      && event.target.hash.startsWith('#')
    ) {
      event.preventDefault()
      // do something
      try {
        // 解码这一步会有失败的可能, 这里使用 try catch 进行捕获
        const hash = decodeURIComponent(event.target.hash)
        const target = document.querySelector(hash)
        window.scrollTo({
          top: target?.offsetTop - 20,
          behavior: 'smooth',
        })
        history.pushState(null, '', event.target.hash)
      }
      catch (error) {
        console.error(error)
      }
    }
  })
</script>
